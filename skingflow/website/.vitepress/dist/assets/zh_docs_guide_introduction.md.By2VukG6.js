import{_ as n,c as s,o as l,ae as i}from"./chunks/framework.BD_Yrv4e.js";const g=JSON.parse('{"title":"介绍","description":"","frontmatter":{},"headers":[],"relativePath":"zh/docs/guide/introduction.md","filePath":"zh/docs/guide/introduction.md"}'),t={name:"zh/docs/guide/introduction.md"};function e(o,a,r,p,h,c){return l(),s("div",null,[...a[0]||(a[0]=[i(`<h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><p>SkinFlow 是一个为智能多智能体应用设计的灵活流程引擎。它为构建复杂的人工智能系统提供了强大的框架。</p><h2 id="什么是-skinflow" tabindex="-1">什么是 SkinFlow？ <a class="header-anchor" href="#什么是-skinflow" aria-label="Permalink to &quot;什么是 SkinFlow？&quot;">​</a></h2><p>SkinFlow 是一个 Node.js 库，使开发者能够创建具有以下特性的复杂多智能体系统：</p><ul><li><strong>灵活架构</strong>：设计自定义智能体工作流和交互</li><li><strong>工具集成</strong>：轻松集成外部工具和 API</li><li><strong>内存管理</strong>：支持上下文感知的智能体内置内存系统</li><li><strong>事件驱动</strong>：实时智能体通信的响应式架构</li><li><strong>可扩展性</strong>：自定义功能的插件系统</li></ul><h2 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-label="Permalink to &quot;核心概念&quot;">​</a></h2><h3 id="智能体-agents" tabindex="-1">智能体 (Agents) <a class="header-anchor" href="#智能体-agents" aria-label="Permalink to &quot;智能体 (Agents)&quot;">​</a></h3><p>智能体是能够感知环境、做出决策和采取行动的自主实体。每个智能体都有自己的：</p><ul><li>状态和内存</li><li>决策能力</li><li>工具访问权限</li><li>通信渠道</li></ul><h3 id="流程-flows" tabindex="-1">流程 (Flows) <a class="header-anchor" href="#流程-flows" aria-label="Permalink to &quot;流程 (Flows)&quot;">​</a></h3><p>流程定义了智能体如何协同工作以完成任务。它们指定了：</p><ul><li>智能体角色和职责</li><li>通信模式</li><li>决策工作流</li><li>工具协调</li></ul><h3 id="工具-tools" tabindex="-1">工具 (Tools) <a class="header-anchor" href="#工具-tools" aria-label="Permalink to &quot;工具 (Tools)&quot;">​</a></h3><p>工具是智能体用来与世界交互的外部功能：</p><ul><li>API 集成</li><li>数据库访问</li><li>文件操作</li><li>网络爬取</li><li>自定义函数</li></ul><h2 id="用例" tabindex="-1">用例 <a class="header-anchor" href="#用例" aria-label="Permalink to &quot;用例&quot;">​</a></h2><p>SkinFlow 非常适合：</p><ul><li><strong>智能助手</strong>：具有专业技能的多智能体聊天机器人</li><li><strong>内容创作</strong>：协作式写作和内容生成系统</li><li><strong>数据分析</strong>：多视角数据处理和洞察生成</li><li><strong>自动化</strong>：具有智能决策的复杂工作流自动化</li><li><strong>研究</strong>：具有不同专业知识的协作研究智能体</li></ul><h2 id="开始使用" tabindex="-1">开始使用 <a class="header-anchor" href="#开始使用" aria-label="Permalink to &quot;开始使用&quot;">​</a></h2><p>准备开始了吗？查看我们的<a href="./getting-started.html">入门指南</a>来构建您的第一个 SkinFlow 应用程序。</p><h2 id="功能特性" tabindex="-1">功能特性 <a class="header-anchor" href="#功能特性" aria-label="Permalink to &quot;功能特性&quot;">​</a></h2><ul><li>🤖 <strong>多智能体架构</strong>：构建具有多个专业化智能体的系统</li><li>🛠️ <strong>工具集成</strong>：将智能体连接到外部 API 和服务</li><li>💾 <strong>内存管理</strong>：具有持久内存的上下文感知智能体</li><li>🔄 <strong>事件驱动</strong>：实时智能体通信和协调</li><li>🔌 <strong>可扩展性</strong>：自定义功能的插件系统</li><li>🎯 <strong>灵活性</strong>：适应各种用例和要求</li></ul><h2 id="架构概览" tabindex="-1">架构概览 <a class="header-anchor" href="#架构概览" aria-label="Permalink to &quot;架构概览&quot;">​</a></h2><p>SkinFlow 采用模块化架构：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐</span></span>
<span class="line"><span>│     智能体 1     │    │     智能体 2     │    │     智能体 N     │</span></span>
<span class="line"><span>└─────────┬───────┘    └─────────┬───────┘    └─────────┬───────┘</span></span>
<span class="line"><span>          │                      │                      │</span></span>
<span class="line"><span>          └──────────────────────┼──────────────────────┘</span></span>
<span class="line"><span>                                 │</span></span>
<span class="line"><span>                    ┌─────────────▼─────────────┐</span></span>
<span class="line"><span>                    │        SkinFlow 核心      │</span></span>
<span class="line"><span>                    │    (流程引擎和中心)       │</span></span>
<span class="line"><span>                    └─────────────┬─────────────┘</span></span>
<span class="line"><span>                                 │</span></span>
<span class="line"><span>          ┌──────────────────────┼──────────────────────┐</span></span>
<span class="line"><span>          │                      │                      │</span></span>
<span class="line"><span>    ┌─────▼─────┐        ┌─────▼─────┐        ┌─────▼─────┐</span></span>
<span class="line"><span>    │   工具    │        │   内存    │        │   事件    │</span></span>
<span class="line"><span>    │  系统     │        │  系统     │        │  系统     │</span></span>
<span class="line"><span>    └───────────┘        └───────────┘        └───────────┘</span></span></code></pre></div><p>下一步：<a href="./getting-started.html">入门指南</a></p>`,26)])])}const u=n(t,[["render",e]]);export{g as __pageData,u as default};
